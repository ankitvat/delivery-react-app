{"version":3,"sources":["constants/index.js","components/Loading.js","App.js","reportWebVitals.js","reducers/admin.reducers.js","reducers/driver.reducers.js","index.js"],"names":["UPDATE_DRIVER","UPDATE_ORDERS","UPDATE_ADMIN","UPDATE_ORDERS_DATA","UPDATE_ADMIN_DATA","Loading","className","Admin","lazy","Driver","App","theme","createMuiTheme","palette","secondary","light","main","dark","contrastText","background","default","paper","id","ThemeProvider","CssBaseline","base","fallback","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","admin","window","localStorage","getItem","JSON","parse","undefined","console","log","initialState","hasOnlyDairyProducts","products","Object","entries","length","hasNoDairy","driver","store","createStore","combineReducers","setDriver","state","action","type","payload","setItem","stringify","orders","customers","Map","locations","forEach","order","subarea","area","hub","has","hubAreas","get","subareas","includes","push","set","areaData","categories","hubs","areas","order_id","crate_id","customer_id","customer_name","phone_number","address_id","house_number","category","product","quantity","package_size","package_type","product_package_id","product_id","region_id","location_id","delivery_person_id","productData","total","unit","deliveryData","driver_id","deliver_date","delivery_type","proof_img","complete_delivery","order_cancel_reason","boxes","milk_packets","customer","delivery","delivered","name","phone","address","onlyDairy","setAdmin","productsCollection","order_staus","order_type","TIMESTAMP","fnvProducts","crateId","crateData","productValue","crates","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba440723.chunk.js","sourcesContent":["// constants for driver\r\nexport const UPDATE_DRIVER = 'UPDATE_DRIVER';\r\nexport const UPDATE_ORDERS = 'UPDATE_ORDERS';\r\n\r\n// admin constants\r\nexport const UPDATE_ADMIN = 'UPDATE_ADMIN';\r\nexport const UPDATE_ORDERS_DATA = 'UPDATE_ORDERS_DATA';\r\nexport const UPDATE_ADMIN_DATA = 'UPDATE_ADMIN_DATA';\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"flex center middle p-10\">\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;","import React, { Suspense, lazy} from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// import useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline} from '@material-ui/core';\n\nimport './css/style.css';\nimport Loading from './components/Loading';\nconst Admin = lazy(() => import('./containers/Admin.jsx'));\nconst Driver = lazy(() => import('./containers/Driver.jsx'));\n\nfunction App() {\n  // const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = createMuiTheme({\n    palette: {\n      // type: 'light',\n      // primary: colors.green[400],\n      secondary: {\n        light: '#ff4081',\n        main: '#f50057',\n        dark: '#c51162',\n        contrastText: '#fff'\n      },\n      background: {\n        default:'#fff',\n        paper:'#fff'\n      },\n    },\n  });\n\n  return (\n    <div id=\"app\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline /> \n        <Router base={'delivery-react-app'}>\n          <main>\n            <Suspense fallback={<Loading />}>\n              <Switch>\n                <Route \n                  path=\"/admin\"\n                  component={Admin} \n                />\n                <Route \n                  path=\"/\"\n                  component={Driver} \n                />\n              </Switch>\n            </Suspense>\n          </main>\n        </Router>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {UPDATE_ADMIN, UPDATE_ORDERS_DATA, UPDATE_ADMIN_DATA} from '../constants/index';\r\n\r\nlet admin = window.localStorage.getItem('admin');\r\nif(admin) {\r\n  admin = JSON.parse(admin);\r\n} else {\r\n  admin = undefined;\r\n}\r\nconsole.log(admin);\r\nconst initialState = {\r\n  admin\r\n}\r\n\r\nfunction hasOnlyDairyProducts(products) {\r\n  if('Dairy' in products && Object.entries(products).length === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction hasNoDairy(products) {\r\n  if(!('Dairy' in products)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction onlyMilkAndPaneer(products) {\r\n  const categories = Object.entries(products);\r\n  categories.forEach(([category, value]) => {\r\n    value.forEach(product => {\r\n      const name = product.product;\r\n      if(name.toLowerCase().includes(\"milk\") === false) return false;\r\n      if(name.toLowerCase().includes(\"paneer\") ===false) return false;\r\n    });\r\n  });\r\n  return true;\r\n}\r\n\r\nexport const setAdmin = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_ADMIN:\r\n      let admin = action.payload;\r\n      window.localStorage.setItem('admin', JSON.stringify(admin));\r\n      return { ...state, admin}\r\n    case UPDATE_ADMIN_DATA:\r\n      // let {customers, areas, subareas, categories, hubs, orders} = action.payload;\r\n      return { \r\n        ...state,\r\n        ...action.payload\r\n      }\r\n\r\n    case UPDATE_ORDERS_DATA:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      let productsCollection = new Map();\r\n      let locations = new Map();\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n      // prepare location data\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub } = order;\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      // accumulate customer data\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, crate_id,\r\n          order_staus, order_type, TIMESTAMP,\r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        // if(order_id === 129779) {\r\n        //   console.log(order);\r\n        // }\r\n\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          category,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        \r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          \r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n          \r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          // if(order_id === 129779) {\r\n          //   console.log(order);\r\n          // }\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            crate_id,\r\n            order_staus, order_type, TIMESTAMP,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            fnvProducts: [],\r\n            delivery_person_id,\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      let crateId = 1;\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].hasNoDairy = false;\r\n        }\r\n\r\n        \r\n      }\r\n      \r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n      }\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          customer_id, \r\n          category, product, quantity,\r\n          package_size, package_type, product_id\r\n        } = order;\r\n\r\n        // if(category !== 'Dairy') {\r\n          \r\n          let crateData = {\r\n            quantity,\r\n            total: package_size * quantity,\r\n            crateId: customers.get(customer_id).crateId,\r\n            crate_id: customers.get(customer_id).crate_id\r\n          }\r\n          if(productsCollection.has(product_id)) {\r\n            let productValue = productsCollection.get(product_id);\r\n            let {crates} = productValue;\r\n            crates.push(crateData);\r\n\r\n            productValue.crates = crates;\r\n          } else {\r\n            let productData = {\r\n              package_size,\r\n              product_id,\r\n              product,\r\n              category,\r\n              unit: package_type,\r\n              crates: [crateData]\r\n            }\r\n            productsCollection.set(product_id, productData);\r\n          }\r\n        // }\r\n      })\r\n      \r\n      return {...state, customers, locations, productsCollection, products, areas, subareas, categories, hubs, orders};\r\n    default:\r\n      return state;\r\n  }\r\n}","import {UPDATE_DRIVER, UPDATE_ORDERS} from '../constants/index';\r\n\r\nlet driver = window.localStorage.getItem('driver');\r\nif(driver) {\r\n  driver = JSON.parse(driver);\r\n} else {\r\n  driver = undefined;\r\n}\r\nconst initialState = {\r\n  driver\r\n}\r\n\r\nfunction hasOnlyDairyProducts(products) {\r\n  if('Dairy' in products && Object.entries(products).length === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction hasNoDairy(products) {\r\n  if(!('Dairy' in products)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const setDriver = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_DRIVER:\r\n      let driver = action.payload;\r\n      window.localStorage.setItem('driver', JSON.stringify(driver));\r\n      return { ...state, driver}\r\n\r\n    case UPDATE_ORDERS:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      let productsCollection = new Map();\r\n      let locations = new Map();\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub } = order;\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, crate_id,\r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        if(delivery_person_id) {\r\n          // console.log(order);\r\n        }\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n\r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            crate_id,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            delivery_person_id,\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n        }\r\n      }\r\n      \r\n      return {...state, customers, locations,  areas, subareas, hubs, orders};\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers} from 'redux';\n\nimport {setAdmin} from './reducers/admin.reducers';\nimport {setDriver} from './reducers/driver.reducers';\n\nconst store = createStore(combineReducers({\n  setDriver,\n  setAdmin\n}));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}