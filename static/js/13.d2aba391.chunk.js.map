{"version":3,"sources":["helpers/exportCSV.js","components/ProductSheet.jsx"],"names":["downloadCSV","array","filename","link","document","createElement","rows","forEach","row","join","push","csv","match","setAttribute","encodeURI","click","CustomerSheet","props","columns","name","selector","sortable","cell","idx","crates","unit","product","style","width","textAlign","id","map","crate","total","quantity","crate_id","className","toString","exportData","productsCollection","data","Array","from","values","productItem","product_id","i","crateId","exportCSV","Date","toLocaleDateString","state","loading","this","customers","actions","onClick","startIcon","color","variant","Component","connect","setAdmin"],"mappings":"qHAkBeA,IAlBf,SAAqBC,GAAiC,IAA1BC,EAAyB,uDAAd,aAC/BC,EAAOC,SAASC,cAAc,KAChCC,EAAO,GACXL,EAAMM,SAAQ,SAAAC,GACZA,EAAMA,EAAIC,KAAK,KACfH,EAAKI,KAAKF,MAEZ,IAAIG,EAAML,EAAKG,KAAK,MACT,MAAPE,IAECA,EAAIC,MAAM,sBACbD,EAAG,sCAAkCA,IAGvCR,EAAKU,aAAa,OAAQC,UAAUH,IACpCR,EAAKU,aAAa,WAAYX,GAC9BC,EAAKY,W,4KCDDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,QAAU,CACR,CACEC,KAAM,UACNC,SAAU,UACVC,UAAU,GAEZ,CACEF,KAAM,SACNE,UAAU,EACVC,KAAM,SAACd,EAAKe,GAAS,IACZC,EAAyBhB,EAAzBgB,OAAQC,EAAiBjB,EAAjBiB,KAAMC,EAAWlB,EAAXkB,QAErB,OACE,wBAAOC,MAAO,CAACC,MAAO,OAAQC,UAAW,QAASC,GAAG,uBAArD,UACE,gCACA,+BACE,uCACA,uCACA,0CAGF,gCAEEN,EAAOO,KAAI,SAAAC,GAAU,IACXC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,SACzB,OACE,+BACE,oBAAIC,UAAU,qBAAd,SAAoCD,IACpC,qBAAIC,UAAU,qBAAd,UAAoCH,EAApC,IAA4CR,KAC5C,oBAAIW,UAAU,qBAAd,SAAoCF,MAH7BR,EAAUS,EAASE,uBAhCzB,EA8CnBC,WAAa,WAAO,IACZC,EAAsB,EAAKtB,MAA3BsB,mBAEFC,EAAOC,MAAMC,KAAKH,EAAmBI,UAErCrC,EAAO,CACT,CAAC,aAAc,UAAW,QAAS,QAAS,QAE9CkC,EAAKjC,SAAQ,SAAAqC,GAAgB,IACpBpB,EAAqCoB,EAArCpB,OAAQC,EAA6BmB,EAA7BnB,KAAMC,EAAuBkB,EAAvBlB,QAASmB,EAAcD,EAAdC,WAC9BrB,EAAOjB,SAAQ,SAACyB,EAAOc,GAAO,IACrBC,EAA4Bf,EAA5Be,QAASd,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,SACnB1B,EAAM,CAAC,GAAI,GAAIuC,EAAT,UAAqBd,EAArB,YAA8BR,GAAQS,GACvC,IAANY,IACDtC,EAAM,CAACqC,EAAYnB,EAASqB,EAAtB,UAAkCd,EAAlC,YAA2CR,GAAQS,IAE3D5B,EAAKI,KAAKF,SAGdwC,YAAU1C,EAAD,2BAA0B,IAAI2C,MAAOC,qBAArC,UA/DT,EAAKC,MAAQ,CACXC,SAAS,GAHM,E,qDAoEjB,IAAIA,GAAU,EADP,EAG+BC,KAAKpC,MAAtCqC,EAHE,EAGFA,UAAWf,EAHT,EAGSA,mBAEZC,EAAO,GAOX,OANGc,IACDF,GAAU,EACVZ,EAAOC,MAAMC,KAAKH,EAAmBI,WAKrC,8BAEMS,EACA,cAAC,IAAD,IACA,8BAIE,cAAC,IAAD,CACEZ,KAAMA,EACNtB,QAASmC,KAAKnC,QACdqC,QACE,cAAC,IAAD,CACEC,QAASH,KAAKf,WACdmB,UAAW,cAAC,IAAD,IACXC,MAAM,YACNC,QAAQ,WAJV,sC,GA7FUC,aAiHbC,uBAxHf,SAAyBV,GAAQ,IAC1BW,EAAYX,EAAZW,SACL,OAAO,eACFA,KAqHQD,CAEb7C","file":"static/js/13.d2aba391.chunk.js","sourcesContent":["function downloadCSV(array, filename = 'export.csv') {\r\n  const link = document.createElement('a');\r\n  let rows = [];\r\n  array.forEach(row => {\r\n    row = row.join(',');\r\n    rows.push(row);\r\n  });\r\n  let csv = rows.join('\\n');\r\n  if (csv == null) return;\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = `data:text/csv;charset=utf-8,${csv}`;\r\n  }\r\n\r\n  link.setAttribute('href', encodeURI(csv));\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nexport default downloadCSV;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DataTable from \"react-data-table-component\";\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport Button from '@material-ui/core/Button';\r\nimport exportCSV from '../helpers/exportCSV';\r\nimport Loading from './Loading';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nclass CustomerSheet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    }\r\n  }\r\n  columns = [\r\n    {\r\n      name: 'Product',\r\n      selector: 'product',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Crates',\r\n      sortable: false,\r\n      cell: (row, idx) => {\r\n        const {crates, unit, product} = row;\r\n\r\n        return (\r\n          <table style={{width: '100%', textAlign: 'left'}} id=\"customer-sheet-table\">\r\n            <thead>\r\n            <tr>\r\n              <th>Crate</th>\r\n              <th >Total</th>\r\n              <th >Qty</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n              crates.map(crate => {\r\n                const { total, quantity, crate_id} = crate;\r\n                return (\r\n                  <tr key={product + crate_id.toString()}>\r\n                    <td className=\"fixed-width-column\">{crate_id}</td>\r\n                    <td className=\"fixed-width-column\">{total} {unit}</td>\r\n                    <td className=\"fixed-width-column\">{quantity}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n    }\r\n  ]\r\n  exportData = () => {\r\n    let { productsCollection} = this.props;\r\n    \r\n    let data = Array.from(productsCollection.values());\r\n\r\n    let rows = [\r\n      ['Product Id', 'Product', 'Crate', 'Total', 'Qty'],\r\n    ];\r\n    data.forEach(productItem => {\r\n      const {crates, unit, product, product_id} = productItem;\r\n      crates.forEach((crate, i) => {\r\n        const {crateId, total, quantity} = crate;\r\n        let row = ['', '', crateId, `${total} ${unit}`, quantity];\r\n        if(i === 0) {\r\n          row = [product_id, product, crateId, `${total} ${unit}`, quantity];\r\n        }\r\n        rows.push(row);\r\n      });\r\n    });\r\n    exportCSV(rows, `Product Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  render() {\r\n    let loading = true;\r\n\r\n    let {customers, productsCollection} = this.props;\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false;\r\n      data = Array.from(productsCollection.values());\r\n      // data = data.filter(customer => (customer.onlyDairy === false))\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          {\r\n            loading?\r\n            <Loading /> :\r\n            <div>\r\n              {/* <div className=\"p-10\">\r\n                \r\n              </div> */}\r\n              <DataTable\r\n                data={data}\r\n                columns={this.columns}\r\n                actions={\r\n                  <Button \r\n                    onClick={this.exportData}\r\n                    startIcon={<DownloadIcon />}\r\n                    color=\"secondary\"\r\n                    variant=\"outlined\"\r\n                  >\r\n                    Download Excel\r\n                  </Button>\r\n                }\r\n                // onSelectedRowsChange={this.updateState}\r\n                // selectableRows\r\n              />\r\n            </div>\r\n          }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(CustomerSheet);"],"sourceRoot":""}