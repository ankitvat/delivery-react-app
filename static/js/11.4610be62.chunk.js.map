{"version":3,"sources":["components/CustomerSheet.jsx"],"names":["CustomerSheet","props","updateState","state","setState","selectedRows","columns","name","selector","sortable","width","cell","row","idx","address","hub","products","phone","categories","Object","entries","allProducts","forEach","category","value","product","push","style","textAlign","id","map","product_id","total","unit","quantity","className","toString","loading","this","customers","data","areas","subareas","hubs","orders","Array","from","values","filter","customer","onlyDairy","Component","connect","setAdmin","dispatch","onUpdateOrdersData","updateOrdersData"],"mappings":"qPAqBMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAEC,aAAcF,EAAME,gBAPnB,EASnBC,QAAU,CACR,CACEC,KAAM,QACNC,SAAU,UACVC,UAAU,EACVC,MAAO,QAET,CACEH,KAAM,MACNE,UAAU,EACVC,MAAO,QACPC,KAAM,SAACC,EAAKC,GAEV,OADgBD,EAAXE,QACUC,MAGnB,CACER,KAAM,OACNC,SAAU,OACVC,UAAU,EACVC,MAAO,SAGT,CACEH,KAAM,QACNC,SAAU,QACVC,UAAU,EACVC,MAAO,SAET,CACEH,KAAM,UACNC,SAAU,WACVC,UAAU,EACVE,KAAM,SAACC,EAAKC,GAAS,IACZG,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,MACXC,EAAaC,OAAOC,QAAQJ,GAC9BK,EAAc,GAOlB,OANAH,EAAWI,SAAQ,YAAwB,IAAD,mBAArBC,EAAqB,KAAXC,EAAW,KACxB,UAAbD,GACDC,EAAMF,SAAQ,SAAAG,GAAO,OAAIJ,EAAYK,KAAKD,SAK5C,wBAAOE,MAAO,CAACjB,MAAO,OAAQkB,UAAW,QAASC,GAAG,uBAArD,UACE,gCACA,+BACE,sCACA,uCACA,0CAGF,gCAEER,EAAYS,KAAI,SAAAL,GAAY,IACnBM,EAAqCN,EAArCM,WAAYC,EAAyBP,EAAzBO,MAAOC,EAAkBR,EAAlBQ,KAAMC,EAAYT,EAAZS,SAC1B3B,EAAOkB,EAAQA,QACrB,OACE,+BACE,6BAAKlB,IACL,qBAAI4B,UAAU,qBAAd,UAAoCH,EAApC,IAA4CC,KAC5C,oBAAIE,UAAU,qBAAd,SAAoCD,MAH7BjB,EAAMmB,WAAaL,EAAWK,uBAjErD,EAAKjC,MAAQ,CACXkC,SAAS,GAHM,E,qDAmFjB,IAAIA,GAAU,EADP,EAGsDC,KAAKrC,MAA7DsC,EAHE,EAGFA,UAEDC,GALG,EAGSC,MAHT,EAGgBC,SAHhB,EAG0BxB,WAH1B,EAGsCyB,KAHtC,EAG4CC,OAExC,IAOX,OANGL,IACDF,GAAU,EAEVG,GADAA,EAAOK,MAAMC,KAAKP,EAAUQ,WAChBC,QAAO,SAAAC,GAAQ,OAA4B,IAAvBA,EAASC,cAIzC,8BAEMb,EACA,cAAC,IAAD,IACA,qBAAKR,GAAG,uBAAR,SACE,cAAC,IAAD,CACEW,KAAMA,EACNlC,QAASgC,KAAKhC,kB,GAvGF6C,aAmHbC,uBA/Hf,SAAyBjD,GAAQ,IAC1BkD,EAAYlD,EAAZkD,SACL,OAAO,eACFA,MAIP,SAA4BC,GAC1B,MAAO,CACLC,mBAAoB,SAACf,GAAD,OAAUc,EAASE,YAAiBhB,QAsH7CY,CAGbpD","file":"static/js/11.4610be62.chunk.js","sourcesContent":["import CircularProgress from '@material-ui/core/CircularProgress';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DataTable from \"react-data-table-component\";\r\n\r\nimport {getAllOrders} from '../api/admin';\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\nimport Loading from './Loading';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data))\r\n  };\r\n}\r\nclass CustomerSheet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    }\r\n  }\r\n  updateState = state => {\r\n    this.setState({ selectedRows: state.selectedRows });\r\n  }\r\n  columns = [\r\n    {\r\n      name: 'Crate',\r\n      selector: 'crateId',\r\n      sortable: true,\r\n      width: '90px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n      \r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Product',\r\n      selector: 'products',\r\n      sortable: false,\r\n      cell: (row, idx) => {\r\n        const {products, phone} = row;\r\n        const categories = Object.entries(products);\r\n        let allProducts = [];\r\n        categories.forEach(([category, value]) => {\r\n          if(category !== 'Dairy') {\r\n            value.forEach(product => allProducts.push(product));\r\n          }\r\n        });\r\n\r\n        return (\r\n          <table style={{width: '100%', textAlign: 'left'}} id=\"customer-sheet-table\">\r\n            <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th >Total</th>\r\n              <th >Qty</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n              allProducts.map(product => {\r\n                const {product_id, total, unit, quantity} = product;\r\n                const name = product.product;\r\n                return (\r\n                  <tr key={phone.toString() + product_id.toString()}>\r\n                    <td>{name}</td>\r\n                    <td className=\"fixed-width-column\">{total} {unit}</td>\r\n                    <td className=\"fixed-width-column\">{quantity}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n    }\r\n  ]\r\n  \r\n  render() {\r\n    let loading = true;\r\n\r\n    let {customers, areas, subareas, categories, hubs, orders} = this.props;\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false;\r\n      data = Array.from(customers.values());\r\n      data = data.filter(customer => (customer.onlyDairy === false))\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          {\r\n            loading?\r\n            <Loading /> :\r\n            <div id=\"customer-sheet-table\">\r\n              <DataTable\r\n                data={data}\r\n                columns={this.columns}\r\n                // onSelectedRowsChange={this.updateState}\r\n                // selectableRows\r\n              />\r\n            </div>\r\n          }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerSheet);"],"sourceRoot":""}