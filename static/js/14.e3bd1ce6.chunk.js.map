{"version":3,"sources":["components/DriverOrderTable.js","components/ChooseOrder.js"],"names":["React","memo","withRouter","props","data","history","console","log","columns","name","selector","sortable","width","cell","row","idx","phone","href","className","address","hub","area","subarea","house_number","striped","noHeader","dense","onRowClicked","e","delivered","alert","push","order_id","ChooseOrder","state","selectedArea","selectedSubarea","selectedHub","showDelivered","this","onUpdateOrdersData","driver","getMyOrders","id","then","res","loading","customers","locations","areas","subareas","hubs","filteredAreas","get","Array","from","keys","sort","a","b","localeCompare","subareasCollection","values","forEach","areaSubareas","Map","has","filter","item","indexOf","toLowerCase","delivery","deliver_date","Loading","style","padding","marginRight","TextField","value","label","onChange","setState","target","FormControl","InputLabel","Select","labelId","MenuItem","map","FormControlLabel","control","Switch","checked","color","Button","onClick","selectedDriver","showWithoutDairy","Component","connect","setDriver","dispatch","updateOrders"],"mappings":"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","file":"static/js/14.e3bd1ce6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\n\r\nfunction DriverOrderTable(props) {\r\n  \r\n  const {data, history} = props;\r\n  console.log(history);\r\n  const columns = [\r\n    // {\r\n    //   name: 'Crate',\r\n    //   selector: 'crateId',\r\n    //   sortable: true,\r\n    //   width: '70px'\r\n    // },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px',\r\n      cell: (row, idx) => {\r\n        let {phone} = row;\r\n        return (\r\n          // address.hub\r\n          <div>\r\n            <a href={`tel:+91${phone}`} className=\"flex middle\">\r\n              <PhoneIcon /> {phone}\r\n            </a>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      selector: 'address.hub',\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Region',\r\n      sortable: true,\r\n      selector: 'address.area',\r\n      width: '140px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.area;\r\n      }\r\n    },\r\n    {\r\n      name: 'Locality',\r\n      sortable: true,\r\n      selector: 'address.subarea',\r\n      width: '150px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.subarea;\r\n      }\r\n    },\r\n    {\r\n      name: 'House',\r\n      selector: 'address.house',\r\n      width: '200px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.house_number;\r\n      }\r\n    }\r\n  ];\r\n\r\n  console.log(\"Rerendering Table\");\r\n\r\n  return (\r\n    \r\n    <DataTable\r\n      striped={true}\r\n      noHeader\r\n      dense={true}\r\n      data={data}\r\n      columns={columns}\r\n      onRowClicked={(row, e) => {\r\n        if(row.delivered) {\r\n          alert('Already delivered');\r\n          return;\r\n        }\r\n        history.push(`/${row.order_id}/deliver`)\r\n      }}\r\n    />\r\n  )\r\n};\r\n\r\nexport default React.memo(withRouter(DriverOrderTable));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Button, TextField } from '@material-ui/core';\r\n\r\nimport Loading from '../components/Loading';\r\nimport {getMyOrders} from '../api/driver';\r\nimport {updateOrders} from '../actions/driver.actions';\r\nimport DriverOrderTable from './DriverOrderTable';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setDriver} = state;\r\n  return {\r\n    ...setDriver\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrders(data))\r\n  };\r\n}\r\n\r\nclass ChooseOrder extends Component {\r\n  state = {\r\n    phone: \"\",\r\n    selectedArea: 'all',\r\n    selectedSubarea: 'all',\r\n    selectedHub: 'all',\r\n    showDelivered: false\r\n  }\r\n  componentDidMount() {\r\n    let {onUpdateOrdersData, driver} = this.props;\r\n    getMyOrders(driver.id)\r\n    .then(res => {\r\n      onUpdateOrdersData(res.data);\r\n    })\r\n  }\r\n  render() {\r\n    let loading = true, data = [];\r\n    let {selectedArea, selectedHub, selectedSubarea, phone, showDelivered } = this.state;\r\n    let {customers, locations, areas, subareas, hubs} = this.props;\r\n\r\n    \r\n    if(selectedHub !== 'all') {\r\n      let filteredAreas = locations.get(selectedHub);\r\n      areas = Array.from(filteredAreas.keys());\r\n\r\n      areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n      let subareasCollection = selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n\r\n    if(selectedArea !== 'all') {\r\n      \r\n      let filteredAreas = new Map();\r\n      Array.from(locations.keys()).forEach(hub => {\r\n        if(locations.get(hub).has(selectedArea)) {\r\n          filteredAreas = locations.get(hub);\r\n        }\r\n      })\r\n\r\n      let subareasCollection = [filteredAreas.get(selectedArea)]\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n\r\n    if(customers) {\r\n      loading = false;\r\n      data = Array.from(customers.values());\r\n      \r\n\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea !== 'all') {\r\n          if(item.address.area !== selectedArea) return false;\r\n        }\r\n        if(selectedSubarea !== 'all') {\r\n          if(item.address.subarea !== selectedSubarea) return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      data = data.filter((item) => {\r\n        if(showDelivered) {\r\n          if(item.delivery.deliver_date) return true;\r\n          return false;\r\n        } else {\r\n          if(item.delivery.deliver_date) return false;\r\n          return true;\r\n        }\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading ? \r\n          <Loading /> :\r\n          <div>\r\n            <div\r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <TextField\r\n                  value={phone}\r\n                  label=\"Phone or Name\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 160}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              \r\n            </div>\r\n            <div\r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"area-filter\">Area</InputLabel>\r\n                  <Select\r\n                    labelId=\"area-filter\"\r\n                    style={{width: 150}}\r\n                    value={selectedArea}\r\n                    onChange={(e) => {\r\n                      let selectedArea = e.target.value;\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {areas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              \r\n              <div >\r\n                <FormControl>\r\n                  <InputLabel id=\"subarea-filter\">Subareas</InputLabel>\r\n                  <Select\r\n                    labelId=\"subarea-filter\"\r\n                    style={{width: 150}}\r\n                    value={selectedSubarea}\r\n                    onChange={(e, b) => {\r\n                      let selectedSubarea = e.target.value;\r\n                      this.setState({selectedSubarea});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {subareas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n            </div>\r\n            \r\n            <div\r\n              className=\"flex space-bw\"\r\n              style={{padding: 10}}\r\n            >\r\n              <div>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showDelivered}\r\n                      onChange={(e, showDelivered) => this.setState({showDelivered})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Delivered\"\r\n                />\r\n              </div>\r\n              <div >\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      phone: \"\",\r\n                      selectedArea: 'all',\r\n                      selectedSubarea: 'all',\r\n                      selectedHub: 'all',\r\n                      selectedDriver: 'all',\r\n                      showWithoutDairy: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <DriverOrderTable \r\n              data={data}\r\n            />\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChooseOrder);"],"sourceRoot":""}