{"version":3,"sources":["components/DeliveryInfo.js","components/OrderDataTable.js","components/OrderManagement.jsx"],"names":["Transition","React","forwardRef","props","ref","Slide","direction","OrderDeliveryForm","Review","customer","deliveryBoys","console","log","delivery","driver_id","deliver_date","delivery_type","proof_img","complete_delivery","boxes","order_cancel_reason","milk_packets","driver","get","className","Card","variant","Typography","name","Divider","Date","toDateString","style","color","mapDeliveryType","alt","src","width","mapCompleteDelivery","state","this","Dialog","fullScreen","open","TransitionComponent","AppBar","position","Toolbar","IconButton","edge","onClick","setSelectedCustomer","aria-label","margin","padding","Component","connect","setAdmin","OrderDataTable","data","onRowSelect","onSelectionChange","columns","selector","sortable","cell","row","idx","address","hub","area","subarea","house_number","products","dairyProducts","count","forEach","item","product_id","quantity","total","delivery_person_id","striped","noHeader","selectableRows","onSelectedRowsChange","dense","onRowClicked","e","memo","mapStateToProps","OrderManagement","hideAddress","setState","hiddenAddress","loading","phone","selectedArea","selectedSubarea","selectedHub","selectedDriver","showWithoutDairy","selectedRow","customers","locations","areas","subareas","hubs","deliveryBoysData","Array","from","values","filteredAreas","keys","sort","a","b","localeCompare","subareasCollection","areaSubareas","push","Map","has","filter","hasNoDairy","indexOf","Loading","marginRight","TextField","value","label","onChange","target","FormControl","InputLabel","id","Select","labelId","MenuItem","map","FormControlLabel","control","Switch","checked","Button","AssignOrders","dispatch","onUpdateOrdersData","updateOrdersData","useState","selectedRows","setSelectedRows","selectedCustomer","onSelectCustomer","useCallback","changeSelection","allSelected","selectedCount","length","disabled","order_ids","order_id","assignDrivers","then","res","getAllOrders","orders","DeliveryInfo"],"mappings":"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","file":"static/js/13.4f07226a.chunk.js","sourcesContent":["import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Card from '@material-ui/core/Card';\r\nimport Divider from '@material-ui/core/Divider';\r\n// import moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nclass OrderDeliveryForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...props\r\n    }\r\n  }\r\n  Review = () => {\r\n    \r\n    let {customer, deliveryBoys} = this.props;\r\n    console.log(customer);\r\n    const {driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets} = customer.delivery;\r\n\r\n    let driver = deliveryBoys.get(driver_id);\r\n\r\n    function mapDeliveryType(delivery_type) {\r\n      switch (delivery_type) {\r\n        \r\n        case \"in_hand\":\r\n          return \"In Hand Delivery - कस्टमर के हाथ में डिलीवरी की\"\r\n        case \"doorstep\":\r\n          return \"Doorstep Delivery - घर के गेट के बहार आर्डर रखा\"\r\n        case \"society_guard\":\r\n          return \"Handed over to society guard - सोसाइटी गार्ड के पास आर्डर छोड़ा\"\r\n        case \"tower_guard\":\r\n          return \"Handed over to tower guard - टावर गार्ड के पास आर्डर छोड़ा\"\r\n        case \"order_cancelled\":\r\n          return \"Order Cancelled - आर्डर कैंसिल\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Select Delivery Type - डिलीवरी कहाँ करी</span>;\r\n      }\r\n    }\r\n    function mapCompleteDelivery(complete_delivery) {\r\n      switch (complete_delivery) {\r\n        \r\n        case \"yes\":\r\n          return \"Yes - हाँ, मैंने पूरा आर्डर डिलीवर किया\"\r\n        case \"no\":\r\n          return \"No - नहीं,  पूरा आर्डर डिलीवर नहीं हुआ है\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Complete Order Delivered? - क्या आपने पूरा आर्डर डिलीवर किया?</span>;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"pv-10\">\r\n        \r\n        {\r\n        customer.delivery.deliver_date ?\r\n        <Card variant=\"outlined\">\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered By</Typography>\r\n            <Typography variant=\"h6\">\r\n              {driver.name}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered On</Typography>\r\n            <Typography variant=\"h6\">\r\n              {new Date(deliver_date).toDateString()}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n              <Typography variant=\"body\">Delivery Type - डिलीवरी कहाँ करी</Typography>\r\n              <Typography variant=\"h6\">\r\n                {mapDeliveryType(delivery_type)}\r\n              </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivery Photo</Typography>\r\n            {\r\n              proof_img ?\r\n              <div>\r\n                <img alt=\"order\" src={proof_img} width={300} /> \r\n              </div> :\r\n              <Typography variant=\"h6\"><span style={{color: 'red'}}>No Picture taken</span></Typography>\r\n            }\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Complete Order Delivered? - क्या पूरा आर्डर डिलीवर किया?</Typography>\r\n            <Typography variant=\"h6\">\r\n              {mapCompleteDelivery(complete_delivery)}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Boxes - कितने डब्बे डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{boxes}</Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Milk Packets - कितने दूध के पैकेट डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{milk_packets}</Typography>\r\n          </div>\r\n        </Card> :\r\n        \r\n          <Typography variant=\"h3\" style={{color: 'red'}} >\r\n            Not Delivered yet\r\n          </Typography>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    \r\n    let {customer} = this.props;\r\n    \r\n    return (\r\n      <div >\r\n        {customer && <Dialog \r\n          fullScreen \r\n          open={true}\r\n          TransitionComponent={Transition}\r\n        >\r\n          <AppBar\r\n            position=\"fixed\"\r\n            color=\"default\"\r\n          >\r\n            <Toolbar>\r\n              <IconButton \r\n                edge=\"start\" \r\n                color=\"inherit\" \r\n                onClick={() => {\r\n                  this.props.setSelectedCustomer(false);\r\n                }} \r\n                aria-label=\"close\"\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" >\r\n                {customer.name}\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <div style={{margin: '60px 10px 20px 10px', padding: '30px 10px'}}>\r\n            <Typography variant=\"h4\" >\r\n              Delivery Information\r\n            </Typography>\r\n            <Divider />\r\n            <this.Review />\r\n          </div>\r\n        </Dialog>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderDeliveryForm);\r\n","import React from 'react';\r\nimport DataTable from \"react-data-table-component\";\r\nimport DeliveryInfo from \"./DeliveryInfo\";\r\n\r\nfunction OrderDataTable(props) {\r\n  const {data, onRowSelect, onSelectionChange, deliveryBoys} = props;\r\n  const columns = [\r\n    {\r\n      name: 'Crate',\r\n      selector: 'crateId',\r\n      sortable: true,\r\n      width: '70px'\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      selector: 'address.hub',\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Region',\r\n      sortable: true,\r\n      selector: 'address.area',\r\n      width: '140px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.area;\r\n      }\r\n    },\r\n    {\r\n      name: 'Locality',\r\n      sortable: true,\r\n      selector: 'address.subarea',\r\n      width: '150px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.subarea;\r\n      }\r\n    },\r\n    {\r\n      name: 'House',\r\n      selector: 'address.house',\r\n      width: '200px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.house_number;\r\n      }\r\n    },\r\n    {\r\n      name: 'Gable Top',\r\n      selector: 'gable-top',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 811) count += item.quantity;\r\n          });\r\n          if(count) return count;\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Paneer',\r\n      selector: 'paneer',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 225) count += item.total;\r\n          });\r\n          if(count) return count + 'g';\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Driver',\r\n      selector: '_driver',\r\n      cell: (row, idx) => {\r\n        let {delivery_person_id} = row;\r\n        if(delivery_person_id) {\r\n          let driver = deliveryBoys.get(delivery_person_id);\r\n          return driver ? driver.name : '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Delivered by',\r\n      selector: 'delivery',\r\n      cell: (row, idx) => {\r\n        let {delivery} = row;\r\n        const {driver_id, deliver_date} = delivery;\r\n        if(driver_id && deliver_date) {\r\n          let driver = deliveryBoys.get(driver_id);\r\n          return driver ? driver.name : 'Not Delivered yet';\r\n        }\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n\r\n  console.log(\"Rerendering Table\");\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        striped={true}\r\n        noHeader\r\n        selectableRows\r\n        onSelectedRowsChange={onSelectionChange}\r\n        dense={true}\r\n        data={data}\r\n        columns={columns}\r\n        onRowClicked={(row, e) => {\r\n          onRowSelect(row);\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default React.memo(OrderDataTable);","import React, { Component, useMemo, useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Button, Divider, TextField } from '@material-ui/core';\r\n\r\nimport Loading from './Loading';\r\nimport OrderDataTable from './OrderDataTable';\r\nimport {assignDrivers, getAllOrders} from '../api/admin';\r\nimport DeliveryInfo from \"./DeliveryInfo\";\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: 'all',\r\n      selectedSubarea: 'all',\r\n      selectedHub: 'all',\r\n      selectedDriver: 'all',\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedSubarea, selectedDriver, showWithoutDairy, phone } = this.state;\r\n    let {customers, locations, areas, subareas, hubs, deliveryBoys} = this.props;\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n\r\n    if(selectedHub !== 'all') {\r\n      let filteredAreas = locations.get(selectedHub);\r\n      areas = Array.from(filteredAreas.keys());\r\n\r\n      areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n      let subareasCollection = selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n\r\n    if(selectedArea !== 'all') {\r\n      \r\n      let filteredAreas = new Map();\r\n      Array.from(locations.keys()).forEach(hub => {\r\n        if(locations.get(hub).has(selectedArea)) {\r\n          filteredAreas = locations.get(hub);\r\n        }\r\n      })\r\n\r\n      let subareasCollection = [filteredAreas.get(selectedArea)]\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false\r\n      data = Array.from(customers.values());\r\n\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea !== 'all') {\r\n          if(item.address.area !== selectedArea) return false;\r\n        }\r\n        if(selectedSubarea !== 'all') {\r\n          if(item.address.subarea !== selectedSubarea) return false;\r\n        }\r\n        if(selectedDriver !== 'all') {\r\n          if(item.delivery_person_id !== selectedDriver) return false;\r\n        }\r\n        if(showWithoutDairy) {\r\n          if(item.hasNoDairy) return true;\r\n          return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n\r\n              <div style={{marginRight: 20, width: 120}}>\r\n                <TextField\r\n                  value={phone}\r\n                  label=\"Phone\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20, width: 120}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"area-filter\">Area</InputLabel>\r\n                  <Select\r\n                    labelId=\"area-filter\"\r\n                    style={{width: 180}}\r\n                    value={selectedArea}\r\n                    onChange={(e) => {\r\n                      let selectedArea = e.target.value;\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {areas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"subarea-filter\">Subareas</InputLabel>\r\n                  <Select\r\n                    labelId=\"subarea-filter\"\r\n                    style={{width: 180}}\r\n                    value={selectedSubarea}\r\n                    onChange={(e, b) => {\r\n                      let selectedSubarea = e.target.value;\r\n                      this.setState({selectedSubarea});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {subareas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Assigned Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    value={selectedDriver || 'all'}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              {/* <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Delivered by</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    value={selectedDriver}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div> */}\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showWithoutDairy}\r\n                      onChange={(e, showWithoutDairy) => this.setState({showWithoutDairy})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Show Customers Without Dairy\"\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      phone: \"\",\r\n                      selectedArea: 'all',\r\n                      selectedSubarea: 'all',\r\n                      selectedHub: 'all',\r\n                      selectedDriver: 'all',\r\n                      showWithoutDairy: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst AssignOrders = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  (props) => {\r\n  const {data, deliveryBoys, onUpdateOrdersData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(false);\r\n\r\n  const onSelectCustomer = useCallback((selectedCustomer) => {\r\n    setSelectedCustomer(selectedCustomer);\r\n  }, []);\r\n  \r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.order_id);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Divider />\r\n      <div className=\"flex right middle\">\r\n        <div className=\"p-10\">\r\n          {\r\n            data.length \r\n          } Rows Filtered\r\n        </div>\r\n        <div className=\"p-10\">\r\n          {\r\n            selectedRows.length \r\n          } Rows Selected\r\n        </div>\r\n        <div className=\"p-10\">\r\n          <div>\r\n            <FormControl variant=\"outlined\">\r\n              <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n              <Select\r\n                labelId=\"driver-filter\"\r\n                style={{width: 200}}\r\n                disabled={selectedRows.length < 1}\r\n                onChange={updateDriver}\r\n              >\r\n                <MenuItem value=\"\">None</MenuItem>\r\n                {deliveryBoysData.map(item => (\r\n                  <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <DeliveryInfo \r\n        customer={selectedCustomer}\r\n        setSelectedCustomer={setSelectedCustomer}\r\n      />\r\n      <OrderDataTable\r\n        data={data}\r\n        onSelectionChange={changeSelection}\r\n        onRowSelect={onSelectCustomer}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);"],"sourceRoot":""}