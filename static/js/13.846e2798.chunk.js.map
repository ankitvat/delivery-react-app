{"version":3,"sources":["components/OrderDataTable.js","components/OrderManagement.jsx"],"names":["OrderDataTable","props","data","onSelectionChange","deliveryBoys","columns","name","selector","sortable","width","cell","row","idx","address","hub","area","subarea","house_number","products","dairyProducts","count","forEach","item","product_id","quantity","total","delivery_person_id","driver","get","console","log","striped","noHeader","selectableRows","onSelectedRowsChange","dense","React","memo","mapStateToProps","state","setAdmin","OrderManagement","hideAddress","setState","hiddenAddress","loading","phone","selectedArea","selectedSubarea","selectedHub","selectedDriver","showWithoutDairy","selectedRow","this","customers","locations","areas","subareas","hubs","deliveryBoysData","Array","from","values","filteredAreas","keys","sort","a","b","localeCompare","subareasCollection","areaSubareas","push","Map","has","filter","hasNoDairy","indexOf","Loading","className","style","padding","marginRight","TextField","value","label","onChange","e","target","FormControl","InputLabel","id","Select","labelId","MenuItem","map","FormControlLabel","control","Switch","checked","color","Button","onClick","AssignOrders","Component","connect","dispatch","onUpdateOrdersData","updateOrdersData","useState","selectedRows","setSelectedRows","changeSelection","useCallback","allSelected","selectedCount","Divider","length","variant","disabled","order_ids","order_id","assignDrivers","then","res","getAllOrders","orders"],"mappings":"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","file":"static/js/13.846e2798.chunk.js","sourcesContent":["import React from 'react';\r\nimport DataTable from \"react-data-table-component\";\r\n\r\nfunction OrderDataTable(props) {\r\n  \r\n  const {data, onSelectionChange, deliveryBoys} = props;\r\n  const columns = [\r\n    {\r\n      name: 'Crate',\r\n      selector: 'crateId',\r\n      sortable: true,\r\n      width: '70px'\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      selector: 'address.hub',\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Region',\r\n      sortable: true,\r\n      selector: 'address.area',\r\n      width: '140px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.area;\r\n      }\r\n    },\r\n    {\r\n      name: 'Locality',\r\n      sortable: true,\r\n      selector: 'address.subarea',\r\n      width: '150px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.subarea;\r\n      }\r\n    },\r\n    {\r\n      name: 'House',\r\n      selector: 'address.house',\r\n      width: '200px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.house_number;\r\n      }\r\n    },\r\n    {\r\n      name: 'Gable Top',\r\n      selector: 'gable-top',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 811) count += item.quantity;\r\n          });\r\n          if(count) return count;\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Paneer',\r\n      selector: 'paneer',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 225) count += item.total;\r\n          });\r\n          if(count) return count + 'g';\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Driver',\r\n      selector: '_driver',\r\n      cell: (row, idx) => {\r\n        let {delivery_person_id} = row;\r\n        if(delivery_person_id) {\r\n          let driver = deliveryBoys.get(delivery_person_id);\r\n          return driver ? driver.name : '';\r\n        }\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n\r\n  console.log(\"Rerendering Table\");\r\n\r\n  return (\r\n    \r\n    <DataTable\r\n      striped={true}\r\n      noHeader\r\n      selectableRows\r\n      onSelectedRowsChange={onSelectionChange}\r\n      dense={true}\r\n      data={data}\r\n      columns={columns}\r\n    />\r\n  )\r\n};\r\n\r\nexport default React.memo(OrderDataTable);","import React, { Component, useMemo, useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Button, Divider, TextField } from '@material-ui/core';\r\n\r\nimport Loading from './Loading';\r\nimport OrderDataTable from './OrderDataTable';\r\nimport {assignDrivers, getAllOrders} from '../api/admin';\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: 'all',\r\n      selectedSubarea: 'all',\r\n      selectedHub: 'all',\r\n      selectedDriver: 'all',\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedSubarea, selectedDriver, showWithoutDairy, phone } = this.state;\r\n    let {customers, locations, areas, subareas, hubs, deliveryBoys} = this.props;\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n\r\n    if(selectedHub !== 'all') {\r\n      let filteredAreas = locations.get(selectedHub);\r\n      areas = Array.from(filteredAreas.keys());\r\n\r\n      areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n      let subareasCollection = selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n\r\n    if(selectedArea !== 'all') {\r\n      \r\n      let filteredAreas = new Map();\r\n      Array.from(locations.keys()).forEach(hub => {\r\n        if(locations.get(hub).has(selectedArea)) {\r\n          filteredAreas = locations.get(hub);\r\n        }\r\n      })\r\n\r\n      let subareasCollection = [filteredAreas.get(selectedArea)]\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false\r\n      data = Array.from(customers.values());\r\n\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea !== 'all') {\r\n          if(item.address.area !== selectedArea) return false;\r\n        }\r\n        if(selectedSubarea !== 'all') {\r\n          if(item.address.subarea !== selectedSubarea) return false;\r\n        }\r\n        if(selectedDriver !== 'all') {\r\n          if(item.delivery_person_id !== selectedDriver) return false;\r\n        }\r\n        if(showWithoutDairy) {\r\n          if(item.hasNoDairy) return true;\r\n          return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <TextField\r\n                  value={phone}\r\n                  label=\"Phone\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"area-filter\">Area</InputLabel>\r\n                  <Select\r\n                    labelId=\"area-filter\"\r\n                    style={{width: 180}}\r\n                    value={selectedArea}\r\n                    onChange={(e) => {\r\n                      let selectedArea = e.target.value;\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {areas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"subarea-filter\">Subareas</InputLabel>\r\n                  <Select\r\n                    labelId=\"subarea-filter\"\r\n                    style={{width: 180}}\r\n                    value={selectedSubarea}\r\n                    onChange={(e, b) => {\r\n                      let selectedSubarea = e.target.value;\r\n                      this.setState({selectedSubarea});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {subareas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showWithoutDairy}\r\n                      onChange={(e, showWithoutDairy) => this.setState({showWithoutDairy})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Show Customers Without Dairy\"\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      phone: \"\",\r\n                      selectedArea: 'all',\r\n                      selectedSubarea: 'all',\r\n                      selectedHub: 'all',\r\n                      selectedDriver: 'all',\r\n                      showWithoutDairy: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst AssignOrders = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  (props) => {\r\n  const {data, deliveryBoys, onUpdateOrdersData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.order_id);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Divider />\r\n      <div className=\"flex right middle\">\r\n        <div className=\"p-10\">\r\n          {\r\n            data.length \r\n          } Rows Filtered\r\n        </div>\r\n        <div className=\"p-10\">\r\n          {\r\n            selectedRows.length \r\n          } Rows Selected\r\n        </div>\r\n        <div className=\"p-10\">\r\n          <div>\r\n            <FormControl variant=\"outlined\">\r\n              <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n              <Select\r\n                labelId=\"driver-filter\"\r\n                style={{width: 200}}\r\n                disabled={selectedRows.length < 1}\r\n                onChange={updateDriver}\r\n              >\r\n                <MenuItem value=\"\">None</MenuItem>\r\n                {deliveryBoysData.map(item => (\r\n                  <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <OrderDataTable\r\n        data={data}\r\n        onSelectionChange={changeSelection}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);"],"sourceRoot":""}