{"version":3,"sources":["constants/index.js","components/Loading.js","App.js","reportWebVitals.js","reducers/admin.reducers.js","reducers/driver.reducers.js","index.js"],"names":["UPDATE_DRIVER","UPDATE_ORDERS","UPDATE_ADMIN","UPDATE_ORDERS_DATA","UPDATE_ADMIN_DATA","Loading","className","Admin","lazy","Driver","App","theme","createMuiTheme","palette","secondary","light","main","dark","contrastText","background","id","ThemeProvider","CssBaseline","base","fallback","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","admin","window","localStorage","getItem","JSON","parse","undefined","console","log","initialState","hasOnlyDairyProducts","products","Object","entries","length","hasNoDairy","driver","store","createStore","combineReducers","setDriver","state","action","type","payload","setItem","stringify","orders","customers","Map","productsCollection","locations","forEach","order","subarea","area","hub","has","hubAreas","get","subareas","includes","push","set","areaData","categories","hubs","areas","order_id","customer_id","customer_name","phone_number","address_id","house_number","category","product","quantity","package_size","package_type","product_package_id","product_id","region_id","location_id","delivery_person_id","productData","total","unit","deliveryData","driver_id","deliver_date","delivery_type","proof_img","complete_delivery","order_cancel_reason","boxes","milk_packets","customer","delivery","delivered","name","phone","address","crateId","onlyDairy","crateData","productValue","crates","setAdmin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.292e4263.chunk.js","sourcesContent":["// constants for driver\r\nexport const UPDATE_DRIVER = 'UPDATE_DRIVER';\r\nexport const UPDATE_ORDERS = 'UPDATE_ORDERS';\r\n\r\n// admin constants\r\nexport const UPDATE_ADMIN = 'UPDATE_ADMIN';\r\nexport const UPDATE_ORDERS_DATA = 'UPDATE_ORDERS_DATA';\r\nexport const UPDATE_ADMIN_DATA = 'UPDATE_ADMIN_DATA';\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"flex center middle p-10\">\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;","import React, { Suspense, lazy} from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// import useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline} from '@material-ui/core';\n\nimport './css/style.css';\nimport Loading from './components/Loading';\nconst Admin = lazy(() => import('./containers/Admin.jsx'));\nconst Driver = lazy(() => import('./containers/Driver.jsx'));\n\nfunction App() {\n  // const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = createMuiTheme({\n    palette: {\n      // type: 'light',\n      // primary: colors.green[400],\n      secondary: {\n        light: '#ff4081',\n        main: '#f50057',\n        dark: '#c51162',\n        contrastText: '#fff'\n      },\n      background: {\n        // default: themeType === 'dark' ? '#232323': '#fff',\n        // paper: themeType === 'dark' ? '#161616': '#fff'\n      },\n    },\n  });\n\n  return (\n    <div id=\"app\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline /> \n        <Router base={'delivery-react-app'}>\n          <main>\n            <Suspense fallback={<Loading />}>\n              <Switch>\n                <Route \n                  path=\"/admin\"\n                  component={Admin} \n                />\n                <Route \n                  path=\"/\"\n                  component={Driver} \n                />\n              </Switch>\n            </Suspense>\n          </main>\n        </Router>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {UPDATE_ADMIN, UPDATE_ORDERS_DATA, UPDATE_ADMIN_DATA} from '../constants/index';\r\n\r\nlet admin = window.localStorage.getItem('admin');\r\nif(admin) {\r\n  admin = JSON.parse(admin);\r\n} else {\r\n  admin = undefined;\r\n}\r\nconsole.log(admin);\r\nconst initialState = {\r\n  admin\r\n}\r\n\r\nfunction hasOnlyDairyProducts(products) {\r\n  if('Dairy' in products && Object.entries(products).length === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction hasNoDairy(products) {\r\n  if(!('Dairy' in products)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const setAdmin = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_ADMIN:\r\n      let admin = action.payload;\r\n      window.localStorage.setItem('admin', JSON.stringify(admin));\r\n      return { ...state, admin}\r\n    case UPDATE_ADMIN_DATA:\r\n      // let {customers, areas, subareas, categories, hubs, orders} = action.payload;\r\n      return { \r\n        ...state,\r\n        ...action.payload\r\n      }\r\n\r\n    case UPDATE_ORDERS_DATA:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      let productsCollection = new Map();\r\n      let locations = new Map();\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n      // prepare location data\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub } = order;\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, \r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        if(delivery_person_id) {\r\n          // console.log(order);\r\n        }\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n\r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            delivery_person_id,\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      let crateId = 1;\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].hasNoDairy = false;\r\n        }\r\n      }\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          customer_id, \r\n          category, product, quantity,\r\n          package_size, package_type, product_id\r\n        } = order;\r\n\r\n        if(category !== 'Dairy') {\r\n          \r\n          let crateData = {\r\n            quantity,\r\n            total: package_size * quantity,\r\n            crateId: customers.get(customer_id).crateId\r\n          }\r\n          if(productsCollection.has(product_id)) {\r\n            let productValue = productsCollection.get(product_id);\r\n            let {crates} = productValue;\r\n            crates.push(crateData);\r\n\r\n            productValue.crates = crates;\r\n          } else {\r\n            let productData = {\r\n              package_size,\r\n              product_id,\r\n              product,\r\n              unit: package_type,\r\n              crates: [crateData]\r\n            }\r\n            productsCollection.set(product_id, productData);\r\n          }\r\n        }\r\n      })\r\n      \r\n      return {...state, customers, locations, productsCollection, products, areas, subareas, categories, hubs, orders};\r\n    default:\r\n      return state;\r\n  }\r\n}","import {UPDATE_DRIVER, UPDATE_ORDERS} from '../constants/index';\r\n\r\nlet driver = window.localStorage.getItem('driver');\r\nif(driver) {\r\n  driver = JSON.parse(driver);\r\n} else {\r\n  driver = undefined;\r\n}\r\nconst initialState = {\r\n  driver\r\n}\r\n\r\nfunction hasOnlyDairyProducts(products) {\r\n  if('Dairy' in products && Object.entries(products).length === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction hasNoDairy(products) {\r\n  if(!('Dairy' in products)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const setDriver = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_DRIVER:\r\n      let driver = action.payload;\r\n      window.localStorage.setItem('driver', JSON.stringify(driver));\r\n      return { ...state, driver}\r\n\r\n    case UPDATE_ORDERS:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      let productsCollection = new Map();\r\n      let locations = new Map();\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub } = order;\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, \r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        if(delivery_person_id) {\r\n          // console.log(order);\r\n        }\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n\r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            delivery_person_id,\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      let crateId = 1;\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n        }\r\n      }\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          customer_id, \r\n          category, product, quantity,\r\n          package_size, package_type, product_id\r\n        } = order;\r\n\r\n        if(category !== 'Dairy') {\r\n          \r\n          let crateData = {\r\n            quantity,\r\n            total: package_size * quantity,\r\n            crateId: customers.get(customer_id).crateId\r\n          }\r\n          if(productsCollection.has(product_id)) {\r\n            let productValue = productsCollection.get(product_id);\r\n            let {crates} = productValue;\r\n            crates.push(crateData);\r\n\r\n            productValue.crates = crates;\r\n          } else {\r\n            let productData = {\r\n              package_size,\r\n              product,\r\n              unit: package_type,\r\n              crates: [crateData]\r\n            }\r\n            productsCollection.set(product_id, productData);\r\n          }\r\n        }\r\n      })\r\n      \r\n      return {...state, customers, locations, productsCollection, products, areas, subareas, categories, hubs, orders};\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers} from 'redux';\n\nimport {setAdmin} from './reducers/admin.reducers';\nimport {setDriver} from './reducers/driver.reducers';\n\nconst store = createStore(combineReducers({\n  setDriver,\n  setAdmin\n}));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}