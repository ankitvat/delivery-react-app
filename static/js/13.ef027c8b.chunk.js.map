{"version":3,"sources":["helpers/exportCSV.js","components/OrderDataTable.js","components/DeliveryInfo.js","components/OrderManagement.jsx"],"names":["downloadCSV","array","filename","link","document","createElement","rows","forEach","row","join","push","csv","match","setAttribute","encodeURI","click","sortIcon","OrderDataTable","props","data","onRowSelect","onSelectionChange","deliveryBoys","columns","name","selector","sortable","width","cell","idx","address","hub","area","subarea","house_number","onlyDairy","hasNoDairy","products","dairyProducts","count","item","product_id","quantity","total","delivery_person_id","driver","get","delivery","driver_id","deliver_date","console","log","striped","noHeader","selectableRows","onSelectedRowsChange","dense","selectableRowsComponent","Checkbox","highlightOnHover","pointerOnHover","onRowClicked","e","React","memo","Transition","forwardRef","ref","Slide","direction","OrderDeliveryForm","Review","customer","delivery_type","proof_img","complete_delivery","boxes","order_cancel_reason","milk_packets","className","Card","variant","Typography","Divider","Date","toDateString","style","color","mapDeliveryType","alt","src","mapCompleteDelivery","state","this","Dialog","fullScreen","open","TransitionComponent","AppBar","position","Toolbar","IconButton","edge","onClick","setSelectedCustomer","aria-label","margin","padding","Component","connect","setAdmin","mapStateToProps","OrderManagement","hideAddress","setState","hiddenAddress","exportData","customers","Array","from","values","filter","exportCSV","toLocaleDateString","loading","phone","selectedArea","selectedSubarea","selectedHub","selectedDriver","showWithoutDairy","selectedRow","orderType","showDelivered","locations","hubs","deliveryBoysData","sort","a","b","localeCompare","areas","subareas","hubName","areaName","includes","length","concat","indexOf","toLowerCase","Loading","marginRight","TextField","value","label","onChange","target","FormControl","InputLabel","id","Select","labelId","MenuItem","map","Autocomplete","options","multiple","renderInput","params","FormControlLabel","control","Switch","checked","Button","AssignOrders","dispatch","onUpdateOrdersData","updateOrdersData","useState","selectedRows","setSelectedRows","selectedCustomer","onSelectCustomer","useCallback","changeSelection","allSelected","selectedCount","disabled","order_ids","order_id","assignDrivers","then","res","getAllOrders","orders","startIcon","DeliveryInfo"],"mappings":"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","file":"static/js/13.ef027c8b.chunk.js","sourcesContent":["function downloadCSV(array, filename = 'export.csv') {\r\n  const link = document.createElement('a');\r\n  let rows = [];\r\n  array.forEach(row => {\r\n    row = row.join(',');\r\n    rows.push(row);\r\n  });\r\n  let csv = rows.join('\\n');\r\n  if (csv == null) return;\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = `data:text/csv;charset=utf-8,${csv}`;\r\n  }\r\n\r\n  link.setAttribute('href', encodeURI(csv));\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\n\r\nexport default downloadCSV;","import React from 'react';\r\nimport DataTable from \"react-data-table-component\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nconst sortIcon = <ArrowDownward />;\r\nfunction OrderDataTable(props) {\r\n  const {data, onRowSelect, onSelectionChange, deliveryBoys} = props;\r\n  const columns = [\r\n    {\r\n      name: 'Crate',\r\n      selector: 'crateId',\r\n      sortable: true,\r\n      width: '70px'\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      selector: 'address.hub',\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Region',\r\n      sortable: true,\r\n      selector: 'address.area',\r\n      width: '140px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.area;\r\n      }\r\n    },\r\n    {\r\n      name: 'Locality',\r\n      sortable: true,\r\n      selector: 'address.subarea',\r\n      width: '150px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.subarea;\r\n      }\r\n    },\r\n    {\r\n      name: 'House',\r\n      selector: 'address.house',\r\n      width: '200px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.house_number;\r\n      }\r\n    },\r\n    {\r\n      name: 'Order Type',\r\n      selector: 'order-type',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        if(row.onlyDairy) return 'Dairy';\r\n        else if(row.hasNoDairy) return 'Grocery';\r\n        else return 'Dairy + Grocery';\r\n      }\r\n    },\r\n    {\r\n      name: 'Gable Top',\r\n      selector: 'gable-top',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 811) count += item.quantity;\r\n          });\r\n          if(count) return count;\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Milk Packets',\r\n      selector: 'milk-packets',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 1) count += item.quantity;\r\n          });\r\n          if(count) return count;\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Paneer',\r\n      selector: 'paneer',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 225) count += item.total;\r\n          });\r\n          if(count) return count + 'g';\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Driver',\r\n      selector: '_driver',\r\n      cell: (row, idx) => {\r\n        let {delivery_person_id} = row;\r\n        if(delivery_person_id) {\r\n          let driver = deliveryBoys.get(delivery_person_id);\r\n          return driver ? driver.name : '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Delivered by',\r\n      selector: 'delivery',\r\n      cell: (row, idx) => {\r\n        let {delivery} = row;\r\n        const {driver_id, deliver_date} = delivery;\r\n        if(driver_id && deliver_date) {\r\n          let driver = deliveryBoys.get(driver_id);\r\n          return driver ? driver.name : 'Not Delivered yet';\r\n        }\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n\r\n  console.log(\"Rerendering Table\");\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        striped={true}\r\n        noHeader\r\n        selectableRows\r\n        onSelectedRowsChange={onSelectionChange}\r\n        dense={true}\r\n        selectableRowsComponent={Checkbox}\r\n        sortIcon={sortIcon}\r\n        data={data}\r\n        columns={columns}\r\n        highlightOnHover={true}\r\n        pointerOnHover={true}\r\n        onRowClicked={(row, e) => {\r\n          onRowSelect(row);\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default React.memo(OrderDataTable);","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Card from '@material-ui/core/Card';\r\nimport Divider from '@material-ui/core/Divider';\r\n// import moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nclass OrderDeliveryForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...props\r\n    }\r\n  }\r\n  Review = () => {\r\n    \r\n    let {customer, deliveryBoys} = this.props;\r\n    console.log(customer);\r\n    const {driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets} = customer.delivery;\r\n\r\n    let driver = deliveryBoys.get(driver_id);\r\n\r\n    function mapDeliveryType(delivery_type) {\r\n      switch (delivery_type) {\r\n        \r\n        case \"in_hand\":\r\n          return \"In Hand Delivery - कस्टमर के हाथ में डिलीवरी की\"\r\n        case \"doorstep\":\r\n          return \"Doorstep Delivery - घर के गेट के बहार आर्डर रखा\"\r\n        case \"society_guard\":\r\n          return \"Handed over to society guard - सोसाइटी गार्ड के पास आर्डर छोड़ा\"\r\n        case \"tower_guard\":\r\n          return \"Handed over to tower guard - टावर गार्ड के पास आर्डर छोड़ा\"\r\n        case \"order_cancelled\":\r\n          return \"Order Cancelled - आर्डर कैंसिल\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Select Delivery Type - डिलीवरी कहाँ करी</span>;\r\n      }\r\n    }\r\n    function mapCompleteDelivery(complete_delivery) {\r\n      switch (complete_delivery) {\r\n        \r\n        case \"yes\":\r\n          return \"Yes - हाँ, मैंने पूरा आर्डर डिलीवर किया\"\r\n        case \"no\":\r\n          return \"No - नहीं,  पूरा आर्डर डिलीवर नहीं हुआ है\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Complete Order Delivered? - क्या आपने पूरा आर्डर डिलीवर किया?</span>;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"pv-10\">\r\n        \r\n        {\r\n        customer.delivery.deliver_date ?\r\n        <Card variant=\"outlined\">\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered By</Typography>\r\n            <Typography variant=\"h6\">\r\n              {driver.name}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered On</Typography>\r\n            <Typography variant=\"h6\">\r\n              {new Date(deliver_date).toDateString()}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n              <Typography variant=\"body\">Delivery Type - डिलीवरी कहाँ करी</Typography>\r\n              <Typography variant=\"h6\">\r\n                {mapDeliveryType(delivery_type)}\r\n              </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivery Photo</Typography>\r\n            {\r\n              proof_img ?\r\n              <div>\r\n                <img alt=\"order\" src={proof_img} width={300} /> \r\n              </div> :\r\n              <Typography variant=\"h6\"><span style={{color: 'red'}}>No Picture taken</span></Typography>\r\n            }\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Complete Order Delivered? - क्या पूरा आर्डर डिलीवर किया?</Typography>\r\n            <Typography variant=\"h6\">\r\n              {mapCompleteDelivery(complete_delivery)}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Boxes - कितने डब्बे डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{boxes}</Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Milk Packets - कितने दूध के पैकेट डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{milk_packets}</Typography>\r\n          </div>\r\n        </Card> :\r\n        \r\n          <Typography variant=\"h3\" style={{color: 'red'}} >\r\n            Not Delivered yet\r\n          </Typography>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    \r\n    let {customer} = this.props;\r\n    \r\n    return (\r\n      <div >\r\n        {customer && <Dialog \r\n          fullScreen \r\n          open={true}\r\n          TransitionComponent={Transition}\r\n        >\r\n          <AppBar\r\n            position=\"fixed\"\r\n            color=\"default\"\r\n          >\r\n            <Toolbar>\r\n              <IconButton \r\n                edge=\"start\" \r\n                color=\"inherit\" \r\n                onClick={() => {\r\n                  this.props.setSelectedCustomer(false);\r\n                }} \r\n                aria-label=\"close\"\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" >\r\n                {customer.name}\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <div style={{margin: '60px 10px 20px 10px', padding: '30px 10px'}}>\r\n            <Typography variant=\"h4\" >\r\n              Delivery Information\r\n            </Typography>\r\n            <Divider />\r\n            <this.Review />\r\n          </div>\r\n        </Dialog>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderDeliveryForm);\r\n","import React, { Component, useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport exportCSV from '../helpers/exportCSV';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport Loading from './Loading';\r\nimport OrderDataTable from './OrderDataTable';\r\nimport {assignDrivers, getAllOrders} from '../api/admin';\r\nimport DeliveryInfo from \"./DeliveryInfo\";\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: [],\r\n      selectedSubarea: 'all',\r\n      selectedHub: 'all',\r\n      selectedDriver: 'all',\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  exportData = () => {\r\n    let {customers } = this.props;\r\n    let data = Array.from(customers.values());\r\n    data = data.filter(customer => (customer.onlyDairy === false));\r\n\r\n    let rows = [\r\n      ['Crate', 'Hub', 'Name', 'Phone', 'Product', 'Total', 'Qty'],\r\n    ];\r\n    exportCSV(rows, `Warehouse Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedSubarea, selectedDriver, orderType, phone, showDelivered } = this.state;\r\n    let {customers, locations, hubs, deliveryBoys} = this.props;\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n    deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n\r\n    /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n    */\r\n    // console.log(locations);\r\n    let areas = [], subareas = [];\r\n    \r\n    if(locations) locations.forEach((hub, hubName) => {\r\n      hub.forEach((area, areaName) => {\r\n        // if valid, insert into areas\r\n        if( (hubName === selectedHub) || (selectedHub === 'all') ) {\r\n          areas.push(areaName);\r\n        }\r\n        \r\n        if( selectedArea.includes(areaName) || selectedArea.length === 0 ) {\r\n          subareas.concat(area);\r\n        }\r\n      });\r\n    });\r\n    areas = areas.sort((a, b) => a.localeCompare(b));\r\n\r\n    // if(selectedHub !== 'all') {\r\n    //   let filteredAreas = locations.get(selectedHub);\r\n    //   areas = Array.from(filteredAreas.keys());\r\n\r\n    //   areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n    //   let subareasCollection =  Array.from(filteredAreas.values());\r\n    //   // selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n    //   if(selectedArea && selectedArea.length) {\r\n    //     selectedArea.forEach(area => {\r\n    //       subareasCollection.concat(filteredAreas.get(area));\r\n    //     })\r\n    //   }\r\n    //   subareas = [];\r\n    //   subareasCollection.forEach(areaSubareas => {\r\n    //     areaSubareas.forEach(subarea => subareas.push(subarea));\r\n    //   });\r\n    //   subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    // }\r\n\r\n    // if(selectedArea && selectedArea.length) {\r\n      \r\n    //   let filteredAreas = new Map();\r\n    //   Array.from(locations.keys()).forEach(hub => {\r\n    //     if(locations.get(hub).has(selectedArea)) {\r\n    //       filteredAreas = locations.get(hub);\r\n    //     }\r\n    //   })\r\n\r\n    //   let subareasCollection = [filteredAreas.get(selectedArea)]\r\n    //   subareas = [];\r\n    //   subareasCollection.forEach(areaSubareas => {\r\n    //     areaSubareas.forEach(subarea => subareas.push(subarea));\r\n    //   });\r\n    //   subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    // }\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false\r\n      data = Array.from(customers.values());\r\n\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea.length) {\r\n          if(!selectedArea.includes(item.address.area)) return false;\r\n        }\r\n        // if(selectedSubarea !== 'all') {\r\n        //   if(item.address.subarea !== selectedSubarea) return false;\r\n        // }\r\n        if(selectedDriver !== 'all') {\r\n          if(selectedDriver === 'none') {\r\n            if(item.delivery_person_id !== null) return false;\r\n          } else if(item.delivery_person_id !== selectedDriver) return false;\r\n        }\r\n        if(showDelivered) {\r\n          if(item.delivery.deliver_date) return true;\r\n          return false;\r\n        }\r\n        if(orderType) {\r\n          console.log(orderType)\r\n          switch (orderType) {\r\n            case 'all':\r\n              return true;\r\n            case 'dairy':\r\n              return item.onlyDairy;\r\n            case 'grocery':\r\n              return item.hasNoDairy;\r\n            case 'both':\r\n              return item.hasNoDairy === false && item.onlyDairy === false;\r\n            default:\r\n              return true;\r\n          }\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n\r\n              <div style={{marginRight: 20, width: 150}}>\r\n                <TextField\r\n                  value={phone}\r\n                  label=\"Phone or Name\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20, width: 120}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20, width: 250}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    labelId=\"area-filter\"\r\n                    options={areas}\r\n                    // getOptionLabel={partner => partner.name}\r\n                    multiple={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"Area\" />}\r\n                    onChange={(e, selectedArea) => {\r\n                      console.log(selectedArea);\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n\r\n              \r\n              {/* <div style={{marginRight: 20, width: 180}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    labelId=\"area-filter\"\r\n                    options={subareas}\r\n                    // getOptionLabel={partner => partner.name}\r\n                    renderInput={(params) => <TextField {...params} label=\"Sub-Areas\" />}\r\n                    onChange={(e, selectedSubarea) => {\r\n                      this.setState({ selectedSubarea: selectedSubarea || 'all'})\r\n                    }}\r\n                  />\r\n                  </FormControl>\r\n              </div> */}\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Assigned Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    value={selectedDriver || 'all'}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"none\">None</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showDelivered}\r\n                      onChange={(e, showDelivered) => this.setState({showDelivered})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Only Delivered\"\r\n                />\r\n              </div>\r\n\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"order-type-filter\">Order Type</InputLabel>\r\n                  <Select\r\n                    labelId=\"order-type-filter\"\r\n                    style={{width: 200}}\r\n                    onChange={(e) => {\r\n                      this.setState({orderType: e.target.value});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"dairy\">Dairy</MenuItem>\r\n                    <MenuItem value=\"grocery\">Grocery</MenuItem>\r\n                    <MenuItem value=\"both\">Dairy + Grocery</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      phone: \"\",\r\n                      selectedArea: 'all',\r\n                      selectedSubarea: 'all',\r\n                      selectedHub: 'all',\r\n                      selectedDriver: 'all',\r\n                      showWithoutDairy: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              exportData={this.exportData}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst AssignOrders = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  (props) => {\r\n  const {data, deliveryBoys, onUpdateOrdersData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n  \r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(false);\r\n\r\n  const onSelectCustomer = useCallback((selectedCustomer) => {\r\n    setSelectedCustomer(selectedCustomer);\r\n  }, []);\r\n  \r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.order_id);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div id=\"assign-orders\">\r\n      <Divider />\r\n      <div className=\"flex right middle\">\r\n        <div className=\"p-10\">\r\n          {\r\n            data.length \r\n          } Rows Filtered\r\n        </div>\r\n        <div className=\"p-10\">\r\n          {\r\n            selectedRows.length \r\n          } Rows Selected\r\n        </div>\r\n        <div className=\"p-10\">\r\n          <div>\r\n            <FormControl variant=\"outlined\">\r\n              <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n              <Select\r\n                labelId=\"driver-filter\"\r\n                style={{width: 200}}\r\n                disabled={selectedRows.length < 1}\r\n                onChange={updateDriver}\r\n              >\r\n                <MenuItem value=\"\">None</MenuItem>\r\n                {deliveryBoysData.map(item => (\r\n                  <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-10\">\r\n          <Button \r\n            startIcon={<DownloadIcon />}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            onClick={props.exportData}\r\n            disabled={true}\r\n          >\r\n            Download Excel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <DeliveryInfo \r\n        customer={selectedCustomer}\r\n        setSelectedCustomer={setSelectedCustomer}\r\n      />\r\n      <OrderDataTable\r\n        data={data}\r\n        onSelectionChange={changeSelection}\r\n        onRowSelect={onSelectCustomer}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);"],"sourceRoot":""}