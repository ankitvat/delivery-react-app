[{"D:\\Coding\\go4Life\\delivery-crm\\src\\index.js":"1","D:\\Coding\\go4Life\\delivery-crm\\src\\reportWebVitals.js":"2","D:\\Coding\\go4Life\\delivery-crm\\src\\App.js":"3","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\TrackMap.js":"4","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\mapStyles.js":"5","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DemoMap.js":"6","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DriverLogin.js":"7","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\AdminLogin.js":"8","D:\\Coding\\go4Life\\delivery-crm\\src\\reducers\\admin.reducers.js":"9","D:\\Coding\\go4Life\\delivery-crm\\src\\reducers\\driver.reducers.js":"10","D:\\Coding\\go4Life\\delivery-crm\\src\\constants\\index.js":"11","D:\\Coding\\go4Life\\delivery-crm\\src\\actions\\admin.actions.js":"12","D:\\Coding\\go4Life\\delivery-crm\\src\\containers\\Admin.jsx":"13","D:\\Coding\\go4Life\\delivery-crm\\src\\containers\\Driver.jsx":"14","D:\\Coding\\go4Life\\delivery-crm\\src\\actions\\driver.actions.js":"15","D:\\Coding\\go4Life\\delivery-crm\\src\\api\\admin.js":"16","D:\\Coding\\go4Life\\delivery-crm\\src\\helpers\\utils.js":"17","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\AdminNavbar.js":"18","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\CustomerSheet.jsx":"19","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\ProductSheet.jsx":"20","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\OrderManagement.jsx":"21","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\Loading.js":"22","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\OrderDataTable.js":"23","D:\\Coding\\go4Life\\delivery-crm\\src\\api\\driver.js":"24","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DriverNavbar.js":"25","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\ChooseOrder.js":"26","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DriverOrderTable.js":"27","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\OrderDeliveryForm.js":"28","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\WebCam.js":"29"},{"size":819,"mtime":1607200778357,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1607155955208,"results":"32","hashOfConfig":"31"},{"size":1670,"mtime":1607683998268,"results":"33","hashOfConfig":"31"},{"size":1581,"mtime":1607196385141,"results":"34","hashOfConfig":"31"},{"size":1923,"mtime":1607196198551,"results":"35","hashOfConfig":"31"},{"size":3552,"mtime":1607322968314,"results":"36","hashOfConfig":"31"},{"size":2150,"mtime":1607627838825,"results":"37","hashOfConfig":"31"},{"size":2504,"mtime":1607828171511,"results":"38","hashOfConfig":"31"},{"size":5956,"mtime":1607671328024,"results":"39","hashOfConfig":"31"},{"size":5731,"mtime":1607613306169,"results":"40","hashOfConfig":"31"},{"size":298,"mtime":1607597000248,"results":"41","hashOfConfig":"31"},{"size":373,"mtime":1607513621368,"results":"42","hashOfConfig":"31"},{"size":2635,"mtime":1607829141105,"results":"43","hashOfConfig":"31"},{"size":1263,"mtime":1607632370329,"results":"44","hashOfConfig":"31"},{"size":252,"mtime":1607597027408,"results":"45","hashOfConfig":"31"},{"size":722,"mtime":1607589862195,"results":"46","hashOfConfig":"31"},{"size":932,"mtime":1608058096370,"results":"47","hashOfConfig":"31"},{"size":2777,"mtime":1607602302142,"results":"48","hashOfConfig":"31"},{"size":3497,"mtime":1607671194656,"results":"49","hashOfConfig":"31"},{"size":2305,"mtime":1607494031224,"results":"50","hashOfConfig":"31"},{"size":10732,"mtime":1607628070761,"results":"51","hashOfConfig":"31"},{"size":244,"mtime":1607494551003,"results":"52","hashOfConfig":"31"},{"size":2976,"mtime":1607593184898,"results":"53","hashOfConfig":"31"},{"size":734,"mtime":1607626149281,"results":"54","hashOfConfig":"31"},{"size":2028,"mtime":1607620714953,"results":"55","hashOfConfig":"31"},{"size":7158,"mtime":1607630840523,"results":"56","hashOfConfig":"31"},{"size":1772,"mtime":1607633983179,"results":"57","hashOfConfig":"31"},{"size":7377,"mtime":1608543139196,"results":"58","hashOfConfig":"31"},{"size":1986,"mtime":1608543510826,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"ham0x1",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"71"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\go4Life\\delivery-crm\\src\\index.js",[],["127","128"],"D:\\Coding\\go4Life\\delivery-crm\\src\\reportWebVitals.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\App.js",["129"],"import React, {useState, Suspense, lazy} from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline} from '@material-ui/core';\n\nimport './css/style.css';\nimport Loading from './components/Loading';\nconst Admin = lazy(() => import('./containers/Admin.jsx'));\nconst Driver = lazy(() => import('./containers/Driver.jsx'));\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  let [themeType = 'light', setTheme] = useState(prefersDarkMode ? 'light' : 'light');\n\n  const theme = createMuiTheme({\n    palette: {\n      type: themeType,\n      // primary: colors.green[400],\n      secondary: {\n        light: '#ff4081',\n        main: '#f50057',\n        dark: '#c51162',\n        contrastText: '#fff'\n      },\n      background: {\n        default: themeType === 'dark' ? '#232323': '#fff',\n        paper: themeType === 'dark' ? '#161616': '#fff'\n      },\n    },\n  });\n\n  return (\n    <div id=\"app\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline /> \n        <Router base={'delivery-react-app'}>\n          <main>\n            <Suspense fallback={<Loading />}>\n              <Switch>\n                <Route \n                  path=\"/admin\"\n                  component={Admin} \n                />\n                <Route \n                  path=\"/\"\n                  component={Driver} \n                />\n              </Switch>\n            </Suspense>\n          </main>\n        </Router>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\TrackMap.js",["130","131","132"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { GoogleMap, withGoogleMap, withScriptjs, Marker} from 'react-google-maps';\r\n\r\nfunction Map(props) {\r\n  console.log(props);\r\n  return (\r\n    <GoogleMap \r\n      defaultZoom={10}\r\n      defaultCenter={{lat: 28.39, lng: 77.03}}\r\n    />\r\n  );\r\n}\r\n\r\nconst WrappedMap = withScriptjs(withGoogleMap(Map()));\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nclass Driver extends Component {\r\n  state = {\r\n    latitude: 0,\r\n    longitude: 0\r\n  }\r\n  componentDidMount() {\r\n    const geo = navigator.geolocation;\r\n    geo.watchPosition((position) => {\r\n      console.log(position);\r\n    });\r\n    \r\n    geo.getCurrentPosition((position) => {\r\n      let {coords} = position;\r\n      let {latitude, longitude} = coords;\r\n      this.setState({\r\n        latitude, longitude\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    let {latitude, longitude} = this.state;\r\n    return (\r\n      <div className=\"map-container\">\r\n        <WrappedMap\r\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${\r\n            process.env.REACT_APP_GOOGLE_KEY\r\n          }`}\r\n          loadingElement={<div style={{ height: `100%` }} />}\r\n          containerElement={<div style={{ height: `100%` }} />}\r\n          mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Driver);",["133","134"],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\mapStyles.js",["135"],"export default [\r\n  {\r\n    featureType: \"water\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#004358\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"landscape\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#1f8a70\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"poi\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#1f8a70\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"road.highway\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#fd7400\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"road.arterial\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#1f8a70\"\r\n      },\r\n      {\r\n        lightness: -20\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"road.local\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#1f8a70\"\r\n      },\r\n      {\r\n        lightness: -17\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    elementType: \"labels.text.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#ffffff\"\r\n      },\r\n      {\r\n        visibility: \"on\"\r\n      },\r\n      {\r\n        weight: 0.9\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    elementType: \"labels.text.fill\",\r\n    stylers: [\r\n      {\r\n        visibility: \"on\"\r\n      },\r\n      {\r\n        color: \"#ffffff\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"poi\",\r\n    elementType: \"labels\",\r\n    stylers: [\r\n      {\r\n        visibility: \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    elementType: \"labels.icon\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    featureType: \"transit\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#1f8a70\"\r\n      },\r\n      {\r\n        lightness: -10\r\n      }\r\n    ]\r\n  },\r\n  {},\r\n  {\r\n    featureType: \"administrative\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#1f8a70\"\r\n      },\r\n      {\r\n        weight: 0.7\r\n      }\r\n    ]\r\n  }\r\n];","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DemoMap.js",["136","137"],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DriverLogin.js",["138","139"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Card, CardContent, CardHeader, Divider, Link as A, TextField } from '@material-ui/core';\r\n\r\nimport {updateDriver} from '../actions/driver.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setDriver} = state;\r\n  return {\r\n    ...setDriver\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateDriver: (admin) => dispatch(updateDriver(admin))\r\n  };\r\n}\r\n\r\nclass LoginAdmin extends Component {\r\n  state = {\r\n    phone: '',\r\n  }\r\n  handleSubmit = () => {\r\n    let {phone } = this.state;\r\n    let {onUpdateDriver} = this.props;\r\n    onUpdateDriver({phone: 7056206263, name: 'Vishal', id: 1})\r\n  }\r\n  render() {\r\n    let {phone} = this.state;\r\n    return (\r\n      <div \r\n        style={{\r\n          display: \"flex\", \r\n          justifyContent: 'center', \r\n          alignItems: 'center',\r\n          background: 'grey',\r\n          height: '100vh'\r\n        }}\r\n      >\r\n        <Card style={{minWidth: 300}}>\r\n          <CardHeader title=\"Login\" />\r\n          <Divider />\r\n          <CardContent>\r\n            <div style={{marginBottom: 10}}>\r\n              <TextField\r\n                autoFocus\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                label=\"Phone Number\"\r\n                type=\"number\"\r\n                value={phone}\r\n                onChange={(e) => this.setState({phone: e.target.value})}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Button \r\n                variant=\"contained\" \r\n                fullWidth\r\n                color=\"primary\"\r\n                onClick={this.handleSubmit}\r\n              >\r\n                Login\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n          <Divider />\r\n          <CardContent>\r\n          <div>\r\n            <Link to=\"/admin\">\r\n              Login as Admin\r\n            </Link>\r\n          </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LoginAdmin);","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\AdminLogin.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\reducers\\admin.reducers.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\reducers\\driver.reducers.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\constants\\index.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\actions\\admin.actions.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\containers\\Admin.jsx",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\containers\\Driver.jsx",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\actions\\driver.actions.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\api\\admin.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\helpers\\utils.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\AdminNavbar.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\CustomerSheet.jsx",["140","141","142","143","144","145","146"],"import CircularProgress from '@material-ui/core/CircularProgress';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DataTable from \"react-data-table-component\";\r\n\r\nimport {getAllOrders} from '../api/admin';\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\nimport Loading from './Loading';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data))\r\n  };\r\n}\r\nclass CustomerSheet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    }\r\n  }\r\n  updateState = state => {\r\n    this.setState({ selectedRows: state.selectedRows });\r\n  }\r\n  columns = [\r\n    {\r\n      name: 'Crate',\r\n      selector: 'crateId',\r\n      sortable: true,\r\n      width: '90px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n      \r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Product',\r\n      selector: 'products',\r\n      sortable: false,\r\n      cell: (row, idx) => {\r\n        const {products, phone} = row;\r\n        const categories = Object.entries(products);\r\n        let allProducts = [];\r\n        categories.forEach(([category, value]) => {\r\n          if(category !== 'Dairy') {\r\n            value.forEach(product => allProducts.push(product));\r\n          }\r\n        });\r\n\r\n        return (\r\n          <table style={{width: '100%', textAlign: 'left'}} id=\"customer-sheet-table\">\r\n            <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th >Total</th>\r\n              <th >Qty</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n              allProducts.map(product => {\r\n                const {product_id, total, unit, quantity} = product;\r\n                const name = product.product;\r\n                return (\r\n                  <tr key={phone.toString() + product_id.toString()}>\r\n                    <td>{name}</td>\r\n                    <td className=\"fixed-width-column\">{total} {unit}</td>\r\n                    <td className=\"fixed-width-column\">{quantity}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n    }\r\n  ]\r\n  \r\n  render() {\r\n    let loading = true;\r\n\r\n    let {customers, areas, subareas, categories, hubs, orders} = this.props;\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false;\r\n      data = Array.from(customers.values());\r\n      data = data.filter(customer => (customer.onlyDairy === false))\r\n      console.log(data);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          {\r\n            loading?\r\n            <Loading /> :\r\n            <div id=\"customer-sheet-table\">\r\n              <DataTable\r\n                data={data}\r\n                columns={this.columns}\r\n                // onSelectedRowsChange={this.updateState}\r\n                // selectableRows\r\n              />\r\n            </div>\r\n          }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerSheet);","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\ProductSheet.jsx",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\OrderManagement.jsx",["147"],"import React, { Component, useMemo, useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Button, Divider, TextField } from '@material-ui/core';\r\n\r\nimport Loading from './Loading';\r\nimport OrderDataTable from './OrderDataTable';\r\nimport {assignDrivers, getAllOrders} from '../api/admin';\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: 'all',\r\n      selectedSubarea: 'all',\r\n      selectedHub: 'all',\r\n      selectedDriver: 'all',\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedSubarea, selectedDriver, showWithoutDairy, phone } = this.state;\r\n    let {customers, locations, areas, subareas, hubs, deliveryBoys} = this.props;\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n\r\n    if(selectedHub !== 'all') {\r\n      let filteredAreas = locations.get(selectedHub);\r\n      areas = Array.from(filteredAreas.keys());\r\n\r\n      areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n      let subareasCollection = selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n\r\n    if(selectedArea !== 'all') {\r\n      \r\n      let filteredAreas = new Map();\r\n      Array.from(locations.keys()).forEach(hub => {\r\n        if(locations.get(hub).has(selectedArea)) {\r\n          filteredAreas = locations.get(hub);\r\n        }\r\n      })\r\n\r\n      let subareasCollection = [filteredAreas.get(selectedArea)]\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false\r\n      data = Array.from(customers.values());\r\n\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea !== 'all') {\r\n          if(item.address.area !== selectedArea) return false;\r\n        }\r\n        if(selectedSubarea !== 'all') {\r\n          if(item.address.subarea !== selectedSubarea) return false;\r\n        }\r\n        if(selectedDriver !== 'all') {\r\n          if(item.delivery_person_id !== selectedDriver) return false;\r\n        }\r\n        if(showWithoutDairy) {\r\n          if(item.hasNoDairy) return true;\r\n          return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <TextField\r\n                  value={phone}\r\n                  label=\"Phone\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"area-filter\">Area</InputLabel>\r\n                  <Select\r\n                    labelId=\"area-filter\"\r\n                    style={{width: 180}}\r\n                    value={selectedArea}\r\n                    onChange={(e) => {\r\n                      let selectedArea = e.target.value;\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {areas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"subarea-filter\">Subareas</InputLabel>\r\n                  <Select\r\n                    labelId=\"subarea-filter\"\r\n                    style={{width: 180}}\r\n                    value={selectedSubarea}\r\n                    onChange={(e, b) => {\r\n                      let selectedSubarea = e.target.value;\r\n                      this.setState({selectedSubarea});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {subareas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showWithoutDairy}\r\n                      onChange={(e, showWithoutDairy) => this.setState({showWithoutDairy})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Show Customers Without Dairy\"\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      phone: \"\",\r\n                      selectedArea: 'all',\r\n                      selectedSubarea: 'all',\r\n                      selectedHub: 'all',\r\n                      selectedDriver: 'all',\r\n                      showWithoutDairy: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst AssignOrders = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  (props) => {\r\n  const {data, deliveryBoys, onUpdateOrdersData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.order_id);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Divider />\r\n      <div className=\"flex right middle\">\r\n        <div className=\"p-10\">\r\n          {\r\n            data.length \r\n          } Rows Filtered\r\n        </div>\r\n        <div className=\"p-10\">\r\n          {\r\n            selectedRows.length \r\n          } Rows Selected\r\n        </div>\r\n        <div className=\"p-10\">\r\n          <div>\r\n            <FormControl variant=\"outlined\">\r\n              <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n              <Select\r\n                labelId=\"driver-filter\"\r\n                style={{width: 200}}\r\n                disabled={selectedRows.length < 1}\r\n                onChange={updateDriver}\r\n              >\r\n                <MenuItem value=\"\">None</MenuItem>\r\n                {deliveryBoysData.map(item => (\r\n                  <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <OrderDataTable\r\n        data={data}\r\n        onSelectionChange={changeSelection}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\Loading.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\OrderDataTable.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\api\\driver.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DriverNavbar.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\ChooseOrder.js",["148","149","150"],"import { Typography } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Button, Divider, TextField } from '@material-ui/core';\r\n\r\nimport Loading from '../components/Loading';\r\nimport {getMyOrders} from '../api/driver';\r\nimport {updateOrders} from '../actions/driver.actions';\r\nimport DriverOrderTable from './DriverOrderTable';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setDriver} = state;\r\n  return {\r\n    ...setDriver\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrders(data))\r\n  };\r\n}\r\n\r\nclass ChooseOrder extends Component {\r\n  state = {\r\n    phone: \"\",\r\n    selectedArea: 'all',\r\n    selectedSubarea: 'all',\r\n    selectedHub: 'all',\r\n  }\r\n  componentDidMount() {\r\n    let {onUpdateOrdersData, driver} = this.props;\r\n    getMyOrders(driver.id)\r\n    .then(res => {\r\n      onUpdateOrdersData(res.data);\r\n    })\r\n  }\r\n  render() {\r\n    let loading = true, data = [];\r\n    let {selectedArea, selectedHub, selectedSubarea, phone } = this.state;\r\n    let {customers, locations, areas, subareas, hubs} = this.props;\r\n\r\n    \r\n    if(selectedHub !== 'all') {\r\n      let filteredAreas = locations.get(selectedHub);\r\n      areas = Array.from(filteredAreas.keys());\r\n\r\n      areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n      let subareasCollection = selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n\r\n    if(selectedArea !== 'all') {\r\n      \r\n      let filteredAreas = new Map();\r\n      Array.from(locations.keys()).forEach(hub => {\r\n        if(locations.get(hub).has(selectedArea)) {\r\n          filteredAreas = locations.get(hub);\r\n        }\r\n      })\r\n\r\n      let subareasCollection = [filteredAreas.get(selectedArea)]\r\n      subareas = [];\r\n      subareasCollection.forEach(areaSubareas => {\r\n        areaSubareas.forEach(subarea => subareas.push(subarea));\r\n      });\r\n      subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    }\r\n\r\n    if(customers) {\r\n      loading = false;\r\n      data = Array.from(customers.values());\r\n      \r\n\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea !== 'all') {\r\n          if(item.address.area !== selectedArea) return false;\r\n        }\r\n        if(selectedSubarea !== 'all') {\r\n          if(item.address.subarea !== selectedSubarea) return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading ? \r\n          <Loading /> :\r\n          <div>\r\n            <div\r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <TextField\r\n                  value={phone}\r\n                  label=\"Phone\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 160}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              \r\n            </div>\r\n            <div\r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n              \r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"area-filter\">Area</InputLabel>\r\n                  <Select\r\n                    labelId=\"area-filter\"\r\n                    style={{width: 150}}\r\n                    value={selectedArea}\r\n                    onChange={(e) => {\r\n                      let selectedArea = e.target.value;\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {areas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              \r\n              <div >\r\n                <FormControl>\r\n                  <InputLabel id=\"subarea-filter\">Subareas</InputLabel>\r\n                  <Select\r\n                    labelId=\"subarea-filter\"\r\n                    style={{width: 150}}\r\n                    value={selectedSubarea}\r\n                    onChange={(e, b) => {\r\n                      let selectedSubarea = e.target.value;\r\n                      this.setState({selectedSubarea});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {subareas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n            </div>\r\n            <div\r\n              className=\"flex right\"\r\n              style={{padding: 10}}\r\n            >\r\n              <div >\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      phone: \"\",\r\n                      selectedArea: 'all',\r\n                      selectedSubarea: 'all',\r\n                      selectedHub: 'all',\r\n                      selectedDriver: 'all',\r\n                      showWithoutDairy: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <DriverOrderTable \r\n              data={data}\r\n            />\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChooseOrder);","D:\\Coding\\go4Life\\delivery-crm\\src\\components\\DriverOrderTable.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\OrderDeliveryForm.js",[],"D:\\Coding\\go4Life\\delivery-crm\\src\\components\\WebCam.js",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":15,"column":29,"nodeType":"157","messageId":"158","endLine":15,"endColumn":37},{"ruleId":"155","severity":1,"message":"159","line":3,"column":50,"nodeType":"157","messageId":"158","endLine":3,"endColumn":56},{"ruleId":"155","severity":1,"message":"160","line":49,"column":10,"nodeType":"157","messageId":"158","endLine":49,"endColumn":18},{"ruleId":"155","severity":1,"message":"161","line":49,"column":20,"nodeType":"157","messageId":"158","endLine":49,"endColumn":29},{"ruleId":"151","replacedBy":"162"},{"ruleId":"153","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":1,"column":1,"nodeType":"166","endLine":129,"endColumn":3},{"ruleId":"155","severity":1,"message":"167","line":7,"column":3,"nodeType":"157","messageId":"158","endLine":7,"endColumn":11},{"ruleId":"155","severity":1,"message":"168","line":18,"column":9,"nodeType":"157","messageId":"158","endLine":18,"endColumn":24},{"ruleId":"155","severity":1,"message":"169","line":4,"column":66,"nodeType":"157","messageId":"158","endLine":4,"endColumn":67},{"ruleId":"155","severity":1,"message":"170","line":26,"column":10,"nodeType":"157","messageId":"158","endLine":26,"endColumn":15},{"ruleId":"155","severity":1,"message":"171","line":1,"column":8,"nodeType":"157","messageId":"158","endLine":1,"endColumn":24},{"ruleId":"155","severity":1,"message":"172","line":6,"column":9,"nodeType":"157","messageId":"158","endLine":6,"endColumn":21},{"ruleId":"155","severity":1,"message":"173","line":108,"column":21,"nodeType":"157","messageId":"158","endLine":108,"endColumn":26},{"ruleId":"155","severity":1,"message":"174","line":108,"column":28,"nodeType":"157","messageId":"158","endLine":108,"endColumn":36},{"ruleId":"155","severity":1,"message":"175","line":108,"column":38,"nodeType":"157","messageId":"158","endLine":108,"endColumn":48},{"ruleId":"155","severity":1,"message":"176","line":108,"column":50,"nodeType":"157","messageId":"158","endLine":108,"endColumn":54},{"ruleId":"155","severity":1,"message":"177","line":108,"column":56,"nodeType":"157","messageId":"158","endLine":108,"endColumn":62},{"ruleId":"155","severity":1,"message":"178","line":1,"column":28,"nodeType":"157","messageId":"158","endLine":1,"endColumn":35},{"ruleId":"155","severity":1,"message":"179","line":1,"column":10,"nodeType":"157","messageId":"158","endLine":1,"endColumn":20},{"ruleId":"155","severity":1,"message":"180","line":8,"column":8,"nodeType":"157","messageId":"158","endLine":8,"endColumn":24},{"ruleId":"155","severity":1,"message":"181","line":9,"column":18,"nodeType":"157","messageId":"158","endLine":9,"endColumn":25},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-unused-vars","'setTheme' is assigned a value but never used.","Identifier","unusedVar","'Marker' is defined but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.",["182"],["183"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'Polyline' is defined but never used.","'pathCoordinates' is assigned a value but never used.","'A' is defined but never used.","'phone' is assigned a value but never used.","'CircularProgress' is defined but never used.","'getAllOrders' is defined but never used.","'areas' is assigned a value but never used.","'subareas' is assigned a value but never used.","'categories' is assigned a value but never used.","'hubs' is assigned a value but never used.","'orders' is assigned a value but never used.","'useMemo' is defined but never used.","'Typography' is defined but never used.","'FormControlLabel' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation"]